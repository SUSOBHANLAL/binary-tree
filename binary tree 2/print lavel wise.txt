/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/
import java.util.*;
public class Solution {

	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		//Your code goes here
		if (root == null)
            return;

        Queue<BinaryTreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            BinaryTreeNode current = queue.poll();

            // Print node information
            System.out.print(current.data + ":L:");
            if (current.left != null) {
                System.out.print(current.left.data);
                queue.add(current.left);
            } else {
                System.out.print("-1");
            }

            System.out.print(",R:");
            if (current.right != null) {
                System.out.print(current.right.data);
                queue.add(current.right);
            } else {
                System.out.print("-1");
            }

            System.out.println();
        }
    }

    
	
}