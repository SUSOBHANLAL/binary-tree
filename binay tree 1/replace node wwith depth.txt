/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static void changeToDepthTree(BinaryTreeNode<Integer> root) {
	    //Your code goes here
		 replaceWithDepthHelper(root, 0);
	}


	public static void replaceWithDepthHelper(BinaryTreeNode<Integer> root, int depth) {
        if (root == null)
            return;

        // Update the data of the current node with the depth
        root.data = depth;

        // Recursively update the left and right subtrees
        replaceWithDepthHelper(root.left, depth + 1);
        replaceWithDepthHelper(root.right, depth + 1);
    }


	//    public static void inOrderTraversal(BinaryTreeNode<Integer> root) {
    //     if (root == null)
    //         return;

    //     // Traverse the left subtree
    //     inOrderTraversal(root.left);

    //     // Print the data of the current node
    //     System.out.print(root.data + " ");

    //     // Traverse the right subtree
    //     inOrderTraversal(root.right);
    // }

}